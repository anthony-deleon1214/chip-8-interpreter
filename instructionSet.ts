// Array of opcode objects
// Types: 'A' = 'Address', 'R' = 'Register', 'NN' = 'Hex byte', 
const instructions = [
    {
        id: CLR,
        name: CLR,
        description: 'Clear screen',
        mask: 0xFFFF,
        pattern: 0x00E0,
        arguments: [],
    },
    {
        id: RET,
        name: RET,
        description: 'Return from a subroutine',
        mask: 0xFFFF,
        pattern: 0x00EE,
        arguments: [],
    },
    {
        id: JP_ADDR,
        name: JP_ADDR,
        description: 'Jump to address NNN',
        mask: 0xF000,
        pattern: 0x1000,
        arguments: [{ mask: 0x0FFF, shift: 0, type: 'A' }],
    },
    {
        id: CALL_ADDR,
        name: CALL_ADDR,
        description: 'Execute subroutine at address NNN',
        mask: 0xF000,
        pattern: 0x2000,
        arguments: [{ mask: 0x0FFF, shift: 0, type: 'A' }],
    },
    {
        id: SE_VX_NN,
        name: SE,
        description: 'Skip next instruction if VX value equals NN',
        mask: 0xF000,
        pattern: 0x3000,
        arguments: [{ mask: 0x0F00, shift: 8, type: 'R' }, { mask: 0x00FF, shift: 0, type: 'NN' }],
    },
    {
        id: SNE_VX_NN,
        name: SNE,
        description: 'Skip next instruction if VX not equal to NN',
        mask: 0xF000,
        pattern: 0x4000,
        arguments: [{ mask: 0x0F00, shift: 8, type: 'R' }, { mask: 0x00FF, shift: 0, type: 'NN' }],
    },
    {
        id: SE_VX_VY,
        name: SE_VX_VY,
        description: 'Skip next instruction if VX equal to VY',
        mask: 0xF00F,
        pattern: 0x5000,
        arguments: [{ mask: 0x0F00, shift: 8, type: 'R' }, { mask: 0x00F0, shift: 4, type: 'R' }],
    },
    {
        id: STO_NN_VX,
        name: STO_NN_VX,
        description: 'Store value NN in register VX',
        mask: 0xF000,
        pattern: 0x6000,
        arguments: [{ mask: 0x0FF0, shift: 4, type: 'NN' }, { mask: 0x000F, shift: 0, type: 'R' }],
    },
]